- title: "Codebase Exploration and Understanding"
  questions:
    - "How do I add a new $X?"
    - "What functions or modules relate to $TOPIC?"
    - "What is the purpose of $MODULE or $FILE?"
    - "How does $FEATURE work in this project?"
    - "What does $VARIABLE or $STRUCT represent?"
  prompt: |
    1. Use the `search_tool` to perform a semantic search for `$X` or `$TOPIC` across the project files.
    2. If the user specifies a module or file, use the `file_info_tool` to summarize its purpose.
    3. If no specific file is mentioned, list relevant files using `list_files_tool` and identify candidates based on their names or summaries.
    4. Use the `file_contents_tool` to fetch key files or relevant excerpts.
    5. Analyze the flow and context of `$VARIABLE` or `$STRUCT` using references from search results.
    6. DO NOT use git-related tools unless they are explicitly listed in the available tools. If they are, consider using `git_log_tool` to explore the history of relevant files or functions.
    7. Synthesize a concise and actionable response summarizing findings and next steps.

- title: "Debugging and Troubleshooting"
  questions:
    - "What's the root cause of this error? $STACKTRACE"
    - "What changes recently introduced $BUG or $ERROR?"
    - "What file defines $FUNCTION or $CONSTANT?"
  prompt: |
    1. If `$STACKTRACE` or `$ERROR` is provided, use `search_tool` to locate the relevant line numbers, modules, or functions.
    2. If a specific function or constant is mentioned, use `file_info_tool` to analyze its definition.
    3. Use `spelunker_tool` to trace the upstream callers or downstream callees of `$FUNCTION`.
    4. If git tools are available, use `git_pickaxe_tool` to identify changes introducing `$BUG` or `$ERROR` in commit history. DO NOT use git tools if they are not in the available tools list.
    5. Cross-reference semantic search results and file definitions to triangulate the root cause.
    6. Summarize root cause findings with references to files or commits, and recommend debugging strategies.

- title: "Code Flow and Relationships"
  questions:
    - "What is the logical flow from function $X to function $Y?"
    - "What modules or functions call $X?"
    - "Where is $Y used in the project?"
  prompt: |
    1. Use the `spelunker_tool` to map the logical flow and identify callers or callees of `$X` and `$Y`.
    2. Use `search_tool` to locate semantic matches for `$X` and `$Y` in project files to identify references.
    3. If detailed analysis is needed, fetch the full contents of relevant files using `file_contents_tool`.
    4. Supplement insights by reviewing related file summaries via `file_info_tool`.
    5. Use git tools (e.g., `git_log_tool`) ONLY if explicitly available, to trace historical changes or commits associated with `$X` or `$Y`.
    6. Compile a step-by-step logical flow or dependency graph between `$X` and `$Y`.

- title: "Test and Build Information"
  questions:
    - "How do I run the tests?"
    - "What tests exist for $FEATURE?"
    - "Where is the CI configuration defined, and how does it work?"
    - "What dependencies are required to build this project?"
  prompt: |
    1. Use `search_tool` to locate references to "tests," "CI," or "dependencies" in files and directories.
    2. If a specific `$FEATURE` is mentioned, search for test files or test-related comments.
    3. Use `list_files_tool` to identify `README`, configuration files (e.g., `docker-compose.yml`, `.env`, `Makefile`), or CI scripts.
    4. Use `file_contents_tool` to examine key files such as `README.md` or `build` scripts for instructions.
    5. DO NOT use git tools unless explicitly listed in available tools. If available, inspect commit history (`git_log_tool`) to identify recent CI or test changes.
    6. Summarize testing or build instructions, linking dependencies or configurations to their usage.

- title: "Version History and Changes"
  questions:
    - "When was $FUNCTION or $MODULE added or modified?"
    - "What does the commit history for $FILE look like?"
    - "Who wrote $CODE_SNIPPET, and why was it added?"
  prompt: |
    1. If git tools are available, use `git_log_tool` to identify when `$FUNCTION` or `$MODULE` was added or modified. DO NOT use git tools if not listed in the available tools.
    2. Use `git_pickaxe_tool` to search commit diffs for `$CODE_SNIPPET` or `$FUNCTION`.
    3. Use `file_info_tool` to cross-reference definitions or modifications in relevant files.
    4. If the project is not a git repository, rely on `search_tool` and `list_files_tool` to approximate relevant files.
    5. Summarize findings with commit details, authors, and reasons (if documented).

- title: "Semantic Search and High-Level Summaries"
  questions:
    - "Where in the project is $TOPIC discussed?"
    - "Summarize the implementation of $FEATURE."
    - "What patterns or libraries are used in $FEATURE?"
  prompt: |
    1. Use `search_tool` to perform a semantic search for `$TOPIC` or `$FEATURE` in the project.
    2. Summarize findings using AI-generated summaries of matched files, fetched via `file_info_tool`.
    3. Identify patterns, libraries, or dependencies from related files or their comments.
    4. If necessary, fetch full files using `file_contents_tool` to extract implementation details.
    5. DO NOT use git tools unless available, and only for historical context (e.g., `git_log_tool`).
    6. Compile a clear, high-level summary for the user, referencing specific files or patterns.

- title: "Operational and Setup Tasks"
  questions:
    - "How do I set up this project locally?"
    - "What environment variables are required?"
    - "How is $SERVICE configured to run in this project?"
  prompt: |
    1. Use `list_files_tool` to locate setup-related files (`README.md`, `.env`, `docker-compose.yml`, etc.).
    2. Search for mentions of "setup," "installation," or `$SERVICE` using `search_tool`.
    3. Use `file_info_tool` to summarize key configuration files and settings.
    4. If available, examine file contents using `file_contents_tool` for detailed instructions.
    5. DO NOT use git tools unless explicitly listed as available. If they are, examine setup-related commits for historical context.
    6. Provide a step-by-step setup guide based on extracted information.

- title: "Documentation and Metadata"
  questions:
    - "What does the documentation say about $FEATURE or $MODULE?"
    - "What README or guide exists for $TOPIC?"
    - "What file contains instructions for $SETUP?"
  prompt: |
    1. Use `list_files_tool` to identify documentation files such as `README.md`, `CONTRIBUTING.md`, or guides.
    2. Perform a semantic search using `search_tool` for mentions of `$FEATURE`, `$MODULE`, or `$SETUP`.
    3. Use `file_info_tool` to summarize documentation sections or metadata relevant to the query.
    4. If detailed content is needed, use `file_contents_tool` to extract specific sections or guides.
    5. Synthesize an answer by compiling key documentation references.
